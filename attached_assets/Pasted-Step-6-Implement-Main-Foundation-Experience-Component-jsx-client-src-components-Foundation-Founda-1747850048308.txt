Step 6: Implement Main Foundation Experience Component
jsx// client/src/components/Foundation/FoundationExperience.js
import React, { useState, useEffect } from 'react';
import StoneSet from './StoneSet';
import FoundationBase from './FoundationBase';
import { STONE_SETS } from './stoneData';
import './FoundationExperience.css';

const FoundationExperience = ({ onComplete }) => {
  // State for current set index (0-8)
  const [currentSetIndex, setCurrentSetIndex] = useState(0);
  
  // State for stone selections
  const [stoneSelections, setStoneSelections] = useState([]);
  
  // State for stones placed on foundation
  const [placedStones, setPlacedStones] = useState([]);
  
  // Current stone set with selection state
  const [currentStones, setCurrentStones] = useState([
    { content: STONE_SETS[0][0], selected: false },
    { content: STONE_SETS[0][1], selected: false },
    { content: STONE_SETS[0][2], selected: false },
  ]);
  
  // Navigate to next set
  const goToNextSet = () => {
    if (currentSetIndex < STONE_SETS.length - 1) {
      setCurrentSetIndex(currentSetIndex + 1);
    }
  };
  
  // Navigate to previous set
  const goToPreviousSet = () => {
    if (currentSetIndex > 0) {
      setCurrentSetIndex(currentSetIndex - 1);
    }
  };
  
  // Handle stone selection
  const handleStoneSelect = (stoneIndex) => {
    // Update current stones to show selection
    const updatedStones = currentStones.map((stone, idx) => ({
      ...stone,
      selected: idx === stoneIndex
    }));
    setCurrentStones(updatedStones);
    
    // Update selections array (replace if already exists)
    const newSelections = [...stoneSelections];
    newSelections[currentSetIndex] = stoneIndex;
    setStoneSelections(newSelections);
    
    // Update placed stones
    const newPlacedStones = placedStones.filter(stone => 
      stone.position !== currentSetIndex
    );
    
    newPlacedStones.push({
      stoneIndex,
      position: currentSetIndex,
      setIndex: currentSetIndex
    });
    
    setPlacedStones(newPlacedStones);
    
    // After a brief delay, go to next set
    setTimeout(() => {
      if (currentSetIndex < STONE_SETS.length - 1) {
        goToNextSet();
      }
    }, 800);
  };
  
  // Update current stones when set changes
  useEffect(() => {
    if (currentSetIndex < STONE_SETS.length) {
      // Get current selection for this set
      const currentSelection = stoneSelections[currentSetIndex];
      
      setCurrentStones([
        { 
          content: STONE_SETS[currentSetIndex][0], 
          selected: currentSelection === 0 
        },
        { 
          content: STONE_SETS[currentSetIndex][1], 
          selected: currentSelection === 1 
        },
        { 
          content: STONE_SETS[currentSetIndex][2], 
          selected: currentSelection === 2 
        },
      ]);
    }
  }, [currentSetIndex, stoneSelections]);
  
  // Check if all sets have been selected
  const isComplete = stoneSelections.length === STONE_SETS.length && 
                     stoneSelections.every(selection => selection !== undefined);
  
  return (
    <div className="foundation-experience">
      <h2 className="phase-title">Choose Your Foundation Stones</h2>
      
      <div className="foundation-layout">
        <div className="foundation-visualizer">
          <FoundationBase 
            placedStones={placedStones} 
            stoneContents={STONE_SETS.flat()}
          />
          <div className="progress-indicator">
            {placedStones.length} of 9 stone sets selected
          </div>
        </div>
        
        <div className="selection-area">
          <StoneSet
            stones={currentStones}
            onStoneSelect={handleStoneSelect}
            currentSetIndex={currentSetIndex}
            totalSets={STONE_SETS.length}
          />
          
          <div className="navigation-controls">
            <button 
              className="nav-button"
              onClick={goToPreviousSet}
              disabled={currentSetIndex === 0}
            >
              Previous Set
            </button>
            
            <button 
              className="nav-button"
              onClick={goToNextSet}
              disabled={currentSetIndex === STONE_SETS.length - 1}
            >
              Next Set
            </button>
          </div>
          
          {isComplete && (
            <div className="completion-controls">
              <button 
                className="complete-button"
                onClick={() => onComplete(stoneSelections)}
              >
                Complete Foundation
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default FoundationExperience;